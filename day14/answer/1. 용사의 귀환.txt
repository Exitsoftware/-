
#include <stdio.h>

int map[52][52] = {};
int end_x, end_y;

int r, c;
int q[10000];
int front = 0, rear = 0;

void fire() {
	for (int i = 1; i <= r; i++)
		for (int j = 1; j <= c; j++) {
			if (map[i][j] == -5) {
				if (map[i + 1][j] == -6 || map[i + 1][j] > -1 && !(i + 1 == end_x && j == end_y))
					map[i + 1][j] = -7;
				if (map[i - 1][j] == -6 || map[i - 1][j] > -1 && !(i - 1 == end_x && j == end_y))
					map[i - 1][j] = -7;
				if (map[i][j + 1] == -6 || map[i][j + 1] > -1 && !(i == end_x && j + 1 == end_y))
					map[i][j + 1] = -7;
				if (map[i][j - 1] == -6 || map[i][j - 1] > -1 && !(i == end_x && j - 1 == end_y))
					map[i][j - 1] = -7;
			}
		}

	for (int i = 1; i <= r; i++)
		for (int j = 1; j <= c; j++)
			if (map[i][j] == -7)
				map[i][j] = -5;
}

void enq(int n) {
	q[rear++] = n;
}

int deq() {
	return q[front++];
}

bool empty() {
	if (front == rear)
		return true;
	else
		return false;
}

int main()
{

	int itr;
	int nCount;		/* 문제의 테스트 케이스 */

	scanf("%d", &nCount);	/* 테스트 케이스 입력 */

	for (itr = 0; itr<nCount; itr++)
	{

		printf("#testcase%d\n", itr + 1);
		bool flag = false;
		char temp[52] = {};
		for (int i = 0; i < 52; i++)
			for (int j = 0; j < 52; j++)
				map[52][52] = -1;

		scanf("%d %d", &r, &c);
		for (int i = 1; i <= r; i++) {
			scanf("%s", temp);
			for (int j = 0; j < c; j++) {

				if (temp[j] == '.')
					map[i][j + 1] = -6;
				else if (temp[j] == 'D') {
					map[i][j + 1] = -3;
					end_x = i;
					end_y = j + 1;
				}
				else if (temp[j] == 'S') {
					map[i][j + 1] = 0;
					enq(i * 100 + j + 1);
				}
				else if (temp[j] == 'X')
					map[i][j + 1] = -4;
				else if (temp[j] == '*')
					map[i][j + 1] = -5;
			}
		}

		int max = 0;

		while (!empty()) {


			int temp_pos = deq();
			int pos_x = temp_pos / 100;
			int pos_y = temp_pos % 100;
			if (pos_x == end_x && pos_y == end_y) {
				flag = true;
				break;
			}
			for (int i = 1; i <= r; i++)
				for (int j = 1; j <= c; j++)
					if (map[i][j] > max) {
						max = map[i][j];
						fire();

					}

			if (map[pos_x][pos_y] != -5) {
				if (map[pos_x + 1][pos_y] == -6 || map[pos_x + 1][pos_y] == -3) {
					map[pos_x + 1][pos_y] = map[pos_x][pos_y] + 1;
					enq((pos_x + 1) * 100 + pos_y);
				}
				if (map[pos_x - 1][pos_y] == -6 || map[pos_x - 1][pos_y] == -3){
					map[pos_x - 1][pos_y] = map[pos_x][pos_y] + 1;
					enq((pos_x - 1) * 100 + pos_y);
				}
				if (map[pos_x][pos_y + 1] == -6 || map[pos_x][pos_y + 1] == -3){
					map[pos_x][pos_y + 1] = map[pos_x][pos_y] + 1;
					enq(pos_x * 100 + pos_y + 1);
				}
				if (map[pos_x][pos_y - 1] == -6 || map[pos_x][pos_y - 1] == -3){
					map[pos_x][pos_y - 1] = map[pos_x][pos_y] + 1;
					enq(pos_x * 100 + pos_y - 1);
				}
			}
		}

		if (flag && map[end_x][end_y] != -3)
			printf("%d\n", map[end_x][end_y]);
		else
			printf("impossible\n");

		flag = false;
		front = 0;
		rear = 0;
	}

	return 0;	/* 반드시 return 0으로 해주셔야합니다. */

}